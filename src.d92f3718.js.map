{"version":3,"sources":["index.js"],"names":["CountdownTimer","constructor","selector","targetDate","document","querySelector","refs","secs","mins","hours","days","startCountdownTimer","intervalId","setInterval","currentDate","Date","now","time","getTime","renderPage","timeIsUp","sec","Math","floor","min","hour","day","textContent","console","log","clearInterval"],"mappings":";;;AA8CA,aA9CA,QAAA,oBAGA,MAAMA,EACFC,aAAY,SAACC,EAAD,WAAWC,IACdD,KAAAA,SAAWE,SAASC,cAAcH,GAClCI,KAAAA,KAAO,CACRC,KAAMH,SAASC,cAAc,2BAC7BG,KAAMJ,SAASC,cAAc,2BAC7BI,MAAOL,SAASC,cAAc,4BAC9BK,KAAMN,SAASC,cAAc,4BAE5BF,KAAAA,WAAaA,EACbQ,KAAAA,sBAITA,sBACKC,KAAAA,WAAaC,YAAa,KACvBC,IAAAA,EAAcC,KAAKC,MACnBC,EAAO,KAAKd,WAAWe,UAAYJ,EAClCK,KAAAA,WAAYF,GACZG,KAAAA,SAAUH,IACR,KAEXE,WAAYF,GACFI,MAAAA,EAAMC,KAAKC,MAAON,EAAQ,IAAc,KACpCO,EAAMF,KAAKC,MAAON,EAAQ,KAAoB,KAC9CQ,EAAOH,KAAKC,MAAON,EAAQ,MAAyB,MACpDS,EAAMJ,KAAKC,MAAMN,EAAQ,OAC1BX,KAAAA,KAAKC,KAAKoB,YAAcN,EAAM,OAASA,IAAQA,EAC/Cf,KAAAA,KAAKE,KAAKmB,YAAcH,EAAM,OAASA,IAAQA,EAC/ClB,KAAAA,KAAKG,MAAMkB,YAAcF,EAAO,OAASA,IAASA,EAClDnB,KAAAA,KAAKI,KAAKiB,YAAcD,EAAM,OAASA,IAAQA,EACpDE,QAAQC,IAAIZ,GAIpBG,SAAUH,GACFA,EAAK,IACLa,cAAc,KAAKlB,YACdV,KAAAA,SAASyB,YAAe,eAKzC,IAAI3B,EAAe,CACfE,SAAU,WACVC,WAAY,IAAIY,KAAK,KAAM,EAAG,GAAI,EAAG,EAAG,EAAG","file":"src.d92f3718.js","sourceRoot":"../src","sourcesContent":["import './sass/main.scss';\n\n\nclass CountdownTimer {\n    constructor({selector, targetDate}) {\n        this.selector = document.querySelector(selector);\n        this.refs = {\n            secs: document.querySelector('span[data-value=\"secs\"]'),\n            mins: document.querySelector('span[data-value=\"mins\"]'),\n            hours: document.querySelector('span[data-value=\"hours\"]'),\n            days: document.querySelector('span[data-value=\"days\"]'),\n        }\n        this.targetDate = targetDate;\n        this.startCountdownTimer();\n    }\n\n\n    startCountdownTimer () {\n    this.intervalId = setInterval (() => {\n        let currentDate = Date.now();\n        let time = this.targetDate.getTime() - currentDate;\n        this.renderPage (time);\n        this.timeIsUp (time);\n            }, 1000)\n    }\n    renderPage (time) {\n        const sec = Math.floor((time % (1000 * 60)) / 1000);\n            const min = Math.floor((time % (1000 * 60 * 60)) / (1000 * 60));\n            const hour = Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60));\n            const day = Math.floor(time / (1000 * 60 * 60 * 24));\n            this.refs.secs.textContent = sec < 10 ? `0${sec}` : sec;\n            this.refs.mins.textContent = min < 10 ? `0${min}` : min;\n            this.refs.hours.textContent = hour < 10 ? `0${hour}` : hour;\n            this.refs.days.textContent = day < 10 ? `0${day}` : day;\n            console.log(time);\n            \n    }\n\n    timeIsUp (time) {\n        if (time<0){\n            clearInterval(this.intervalId);\n            this.selector.textContent = `Time is up`;\n        }\n    }\n}\n\nnew CountdownTimer({\n    selector: '#timer-1',\n    targetDate: new Date(2021, 8, 18, 0, 0, 0, 0),\n  });\n\n"]}